3/6/25
Lesson 1 - what is CSS, external/internal/in-line style sheets, CSS rule anatomy, w3 markup validation
-----------------------
CSS (Cascading Style Sheets) - a stylesheet language used to describe the presentation of a document written in HTML or XML
	- what does 'cascade' mean in CSS?
		1. works/is read from the top down - whatever is read last will be applied
		2. specificity can override this - where id and classes come into play (more specific) than an element selector

HTML vs. CSS:
	- HTML is the foundation/structure
	- CSS is the paint, carpet, wallpaper - how elements should appear (what it looks like)

External style sheets: CSS files located outside of the html file (best way - most common)
	1. used in <head> by:
		- <link rel="stylesheet" href="css/style.css"> -> this links our style.css style sheet to our webpage

Internal style sheets: CSS located inside of the html file
	1. used by the element: <style>whatever_modifications_you_want</style>
	2. no difference in order - it is just dependant on the order which they are read
		- if external is written beforehand, it will read and apply that first
		- if internal is written afterward, any of the same modifications will be overwritten from the external

In-line CSS: using style as an attribute (ie. <p style="color:blue">I'm learning CSS!</p>) - try to avoid this at all times
	1. used by using the style attribute
		- <p style="color:blue">I'm learning CSS!</p>
	2. avoid using this

Anatomy of a CSS ruleset (or rule):
	
	p {
		color: red;
	}
	
	- p represents a selector
	- color represents a property
	- red represents the property value
	- color: red; represents a declaration
	- the whole structure represents the ruleset or rule

**MUST use en-US dialect (color instead of colour) - no errors will be thrown, will just be ignored**


Detecting issues in CSS file: 
	- use CSS validation service by w3c - https://jigsaw.w3.org/css-validator/

Lesson 2 - Selectors
---------------------
4 most common levels of selectors:
	1. element selectors: selects ALL elements of that type; elements can inherit modifications from certain elements (like the body)
		- body: modifies the body element (one per page)
		- p: modifies the p (paragraph, <p>) element
		- least specific
	2. class selectors: selects ALL elements with the attribute class="name_of_class"; starts with a . (period) before the name of the class
		- more specific - will overwrite element selectors
		- ex: .gray {
					color: gray;
			  }
		- more specific than element selector
	3. id selectors: selects ALL elements with id attribute id="name_of_id"; starts with a # (hashtag) before name of the class
		- try not to use these within CSS - more useful in JS or certain situations
		- ex: #second {
					  font-style: italic;
			  }
		- more specific (most specific) than class selectors
	4. universal selector: selects everything on the page; labelled with * (asterisk) only
		- not as common, typically only seen in a "CSS reset"
		- ex: * {
					font-family: monospace;
			}	

how to group selectors: use a , (comma)
	1. h1, h2 {
				color: blue;
			}

how to modify an element inside another element: use a selector and an element attached with that item OR create a class selector
and take each type of element and add the class attribute to it (preferred method)
	- 1st example: p span {
							text-transform: uppercase;
							background-color: gold;
						}
	- 2nd example (preferred): .highlight {
											text-transform: uppercase;
											background-color: gold;	
										}
problem solving - why CSS is not applying certain modifications (due to specificity/cascading)
	1. inspect your webpage (on Google, IE, etc.) using dev tools
	2. hover over specific element you are modifying to see how CSS is cascading/reading it

inheritance - another element inherits the settings/properties from it's parent element
	- body element is parent to every element in the body - which causes inheritance of properties in children
	- common element selectors to utilize inheritance with:
		1. html
		2. main
			- remember, this is only used once and is a semantic element

properties that can be inherited usually involve font or typography - here are things that involve the those two typically:
	1. color
	2. line height
	3. alignment
	4. etc.

**NOTE: properties NOT related to font or typography are NOT inherited**
	- ex: border: 3px solid black; - this will NOT be inherited to each child
	- ex: form elements do not typically inherit such as font
			- can manually do it though:
				button, input, textarea, select {
					font: inherit;
				}

**ALSO NOTE: universal selector is NOT inheritance - we select ALL elements using this**
	- ex: border: 3px solid black; - each element will be selected to have this modification

the !important flag: only use this when you have no other choice; avoid!!!
	- TRY TO AVOID!
	- overrides everything else
	- ex: p {
				color: purple!important;
		}

specificity calculator: visual way to see the specificity of each element, class, or id
	- https://specificity.keegan.st/

Lesson 3: Colors
------------------
Setting a background color - our background color declaration:
	1. background-color: color;
	2. background: color; - shorthand; also allows us to set other properties besides color

Setting a font color declaration:
	1. color: color;

Using RGB for colors:
	ex: color: rgb(255,0,0) -> sets the font color to red
	1. rgba(0,0,0,1)
		- adds a transparency attribute
		- ranges from 0-1:
			- 1 = default, where there is no transparency
			- 0 = 100% transparency
			- 0.5 = 50% transparency
			- etc.

Using hexadecimal for colors:
	1. first, what is hexadecimal?
		- 16 digit number consisting of "#" (before the number), numbers 0-9, letters A-F
	ex: color: #000000; (black); color: #FF0000; (red)
			- first set of two digits = red
			- second set of two digits = green
			- third set of two digits = blue
			- maxed value = FF
	2. we can have a shorthand for hexadecimal colors if the color pattern PAIRS match:
		ex: color: #FFF; is white -> color: #FFFFFF; is also white
			color: #000; is black -> color: #000000l is also black
			color: #F00; is red -> color: #FF0000; is also red
	3. using an IDE, it shows hexadecimal when typing names
		- in the color pattern, it shows hexadecimal color values

Modifying hue, saturation, and lightness:
	1. hsl declaration (hue, saturation, lightness)
		ex: hsl(224,73%,49%) - 0 hue, 100% saturation, 50% lightness; represents red

Additional color tools for picking color palettes:
	- coolors.co
		1. has a color contrast checker to compare text colors with background colors - pretty cool

Lesson 4: Units and Sizes
-------------------------
Absolute length units: most commonly used (look at MDN documentation)
	1. pixels: px (1px = 1/96th of 1in)
		- default is usually 16px for font

What scenarios do we NOT want to use absolute values for size?
	- font-size of a webpage; this is because there can be user settings that can change these fonts and if we have an absolute value
	font-size for a webpage, we take away that option from the user

When do we use absolute values for size then?
	- modifications of sizes on webpage that don't cause user settings to be overwritten such as borders
	ex. border: 2px dashed red;

Percentages:
	- modifies how big a modification is relative to its' parent
	ex. header {
			width: 50%;
		} -> modifies the width of the elements within the header which is relative to size of the parent (header), which is now 50%

		h1 {
			border: 2px dashed red;
			width: 50%;
		} -> modifies the width of the elements in h1, which was 50% of the header element, which is now 25% of the h1 element (parent)

Most common relative length units:
	1. rem - font size relative to root element; since 1rem is default (16px usually default font-size), 
	   2rem doubles the default (so 2rem = 32px)
		- 1rem is default
		- don't set the font-size for the entire webpage, but can do it for other elements such as p
		ex. p {
				font-size: 2rem;
			}
	2. em - font size relative to the element itself
		- use for margin/padding
		- button margin/padding
		ex. h1 {
				font-size: 3rem;
				padding: 0.5em;
			} -> h1 element padding would be half of the font size, which is 1.5rem
	3. ch - character
		- use for defining how many characters on a line; helps define columns
		ex. p {
				font-size: 2rem;
				width: 40ch;
			} -> maximum of 40ch before a line wraps
	4. vw, vh - viewport width, viewport height
		- when vertical content outgrows the page, a horizontal scroll bar will appear alongside the vertical scroll bar which DOES NOT
		account for the scroll bar appearing - use percentages to fix this when setting width (100%); this should be the default, though
			- can also set min-height: 100vh; to set the viewport height to the whole page, preventing vertical content from outgrowing
			the viewport

Developer tools on browser (inspect element) can show you the spaces for margins, padding, etc. as well as default styles/sizes

Lesson 5: Box Model
--------------------
Box model is located in your webpage via developer tools (inspect element) - check the 'Computed' tab
	- specifically shows you the various sizes such as margins, padding, borders, etc. of the certain element you have selected
	- good to use when you want to know exactly what size (in px/pixels) your elements are taking up on the webpage

CSS reset: * {
				margin: 0;
				padding: 0;
				box-sizing: content-box; -> default for ONLY size of the content, no calculations done besides this
				box-sizing: border=box; -> calculates padding and border to the calculation (use this - makes your life easier)
			}

	1. the * (wildcard) selects all elements

What are CSS resets good for?
	- when having trouble keeping track of sizes, use a CSS reset

Margin, padding, border, etc? can be changed to only affect top, right, bottom, left:
	ex: margin-top: 1.5em; -> only affects top of the margin

	- short-hand: margin: 1.5em 2em 2em; (1.5em top and left, 2em right, 2em bottom)
	- use dev tools to help visualize (using box model, remember, select the element you want to view)
	- can interchange with what we are specifying:
		1. border-top: 5px dotted blue; -> this specifies pixel size, line type, and color
			- border-top-width: 5px; -> only specifies pixel size
			- border-top-style: solid; -> only specifies line type
		2. overall, many settings we can individually specify

CSS comments: /* */ or shift-alt-a

outline property: outlines outside border with a border itself
	ex. outline: 5px solid purple;
	- is not calculated in box model equation
	- outline-offset: 5px; -> can offset a certain amount of pixels for where the outline is
		1. can do outline-offset: -20px; -> offsets the outline to go INSIDE the 'container'

Centering margin left and right ONLY (does not work for top and bottom):
	- margin: 3rem auto;

Using border-radius will halve our width and height of our CORNERS - useful for rounding corners of a class aka making a circle

Lesson 6: Typography
---------------------
What is typography?
	- the way that text is arranged and presented

some text properties:
	1. text-decoration: line-through, underline, overline, none, etc.;
		- when would we use none? to remove default underline in a link
	2. text-transform: capitalize, lowercase, uppercase, etc.;
	3. text-align: left, justify, right, etc.;
	4. text-indent: 2em;
	5. line-height: 1.5;
	6. letter-spacing: 1em;
	7. word-spacing: 0.5em;
	8. font-weight: 400; -> affects 'boldness' - default around 300-400
	9. font-style: italic, oblique, normal, etc.;
	10. font-family: sans-serif, monospace, serif, cursive, fantasy; -> for bigger elements (such as body)
		- can have 'fallbacks' -> font-family: 'Courier New', Courier, monospace
			1. checks if PC has 'Courier New' and uses it, if not, uses Courier, etc.
				- need quotes around font name if it has a space
		- look online for 'web-safe fonts' -> using fallback stacks in VSCode are usually web-safe fonts which are automatically installed
		on computers
			1. fonts.google.com -> helps to visualize and choose font stylings
				- can either <link> (html) or import (just copy and paste import statement w/o style elements into top of CSS file)
